{"version":3,"file":"static/js/405.1ad274c4.chunk.js","mappings":"sXAyBMA,EAAS,CACX,MAAS,QACT,gBAAmB,UACnB,QAAW,WACX,aAAgB,OAChB,WAAc,UAEZC,EAAW,CACb,MAAS,QACT,gBAAmB,UACnB,QAAW,WACX,aAAgB,OAChB,WAAc,UAGZC,EAAU,CACZ,CAAEC,GAAI,OAAQC,MAAO,KAAMC,SAAU,IACrC,CAAEF,GAAI,OAAQC,MAAO,OAAQC,SAAU,KACvC,CAAEF,GAAI,QAASC,MAAO,QAASC,SAAU,KACzC,CAAEF,GAAI,QAASC,MAAO,QAASC,SAAU,KACzC,CAAEF,GAAI,SAAUC,MAAO,SAAUC,SAAU,IAC3C,CAAEF,GAAI,SAAUC,MAAO,UAAWC,SAAU,MAgKhD,UA5Jc,WAEV,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAEtBI,EAAwBC,EAAAA,SAAe,GAAEC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAlCG,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,EAAsCJ,EAAAA,SAAe,IAAGK,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAAjDE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAQhC,SAEaG,IAAa,OAAAC,EAAAC,MAAC,KAADC,UAAA,UAAAF,IAU3B,OAV2BA,GAAAG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA5B,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE+B7B,GAAS8B,EAAAA,EAAAA,OAAe,KAAD,GAAxCL,EAAQE,EAAAI,OACCN,EAASO,SAAWP,EAASO,QAAQC,MAAyC,SAAjCR,EAASO,QAAQC,KAAKC,OAClF3B,EAASkB,EAASO,QAAQC,KAAKA,MACvBR,GAAYA,EAASO,SAAWP,EAASO,QAAQC,MAAyC,SAAjCR,EAASO,QAAQC,KAAKC,QACvFC,MAAMV,EAASO,QAAQC,KAAKG,SAAST,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,SAErCW,QAAQC,MAAM,uBAAsBZ,EAAAU,IAAS,yBAAAV,EAAAa,OAAA,GAAAhB,EAAA,mBAEpDL,MAAA,KAAAC,UAAA,CACwB,SAAAqB,IAUxB,OAVwBA,GAAApB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAzB,SAAAmB,EAA0BC,GAAG,IAAAlB,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,WACrBgB,OAAOC,QAAQ,6BAA6B,CAADF,EAAAf,KAAA,eAAAe,EAAAf,KAAA,EACtB7B,GAAS+C,EAAAA,EAAAA,IAAcJ,IAAK,QACjDlB,GADIA,EAAQmB,EAAAb,MACQE,QAEQ,SAApBR,EAASS,OACTjB,IAEAkB,MAAMV,EAASW,UAAQ,wBAAAQ,EAAAJ,OAAA,GAAAE,EAAA,MAEtCvB,MAAA,KAAAC,UAAA,CAKD,OAHA4B,EAAAA,EAAAA,YAAU,WACN/B,GACJ,GAAG,CAACX,KAEA2C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACH,UAAU,OAAMC,UAClBC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAI,GAAIL,UAAU,qBAAoBC,UACxCF,EAAAA,EAAAA,MAACO,EAAAA,GAAI,CAACC,GAAG,kBAAkBP,UAAU,YAAWC,SAAA,CAAC,SAC3CC,EAAAA,EAAAA,KAACM,EAAAA,IAAa,YAI5BN,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAAAF,UACDC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAI,GAAGJ,UACTC,EAAAA,EAAAA,KAACO,EAAAA,GAAK,CAACT,UAAU,OAAMC,UACnBC,EAAAA,EAAAA,KAACQ,EAAAA,GAAS,CAAAT,UACNF,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAACC,GAAI,CAAEC,MAAO,OAAQC,SAAU,UAAWb,SAAA,EAC7CC,EAAAA,EAAAA,KAACa,EAAAA,EAAc,CAACH,GAAI,CAAEI,UAAW,QAASf,UACtCF,EAAAA,EAAAA,MAACkB,EAAAA,EAAK,CAACC,cAAY,EAAC,aAAW,eAAcjB,SAAA,EACzCC,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAAAlB,UACNC,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAAAnB,SACJvD,EAAQ2E,KAAI,SAACC,GAAM,OAChBpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CAENC,MAAOF,EAAOE,MACdC,MAAO,CAAE5E,SAAUyE,EAAOzE,UAC1BmD,UAAU,sBAAqBC,SAE9BqB,EAAO1E,OALH0E,EAAO3E,GAMJ,SAIxBuD,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CAAAzB,SACL7C,GACGA,EACKuE,MAAMlE,EAAOI,EAAaJ,EAAOI,EAAcA,GAC/CwD,KAAI,SAACO,EAAMC,GACR,IAAMC,EAAOD,EAAQ,EACrB,OACI3B,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAACW,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAEhC,SACxCvD,EAAQ2E,KAAI,SAACC,GACV,IAAMY,EAAQN,EAAKN,EAAO3E,IAC1B,OACIuD,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CAENC,MAAOF,EAAOE,MACdxB,UAAU,cAAaC,SAER,SAAdqB,EAAO3E,GACFmF,EACc,WAAdR,EAAO3E,IACLuD,EAAAA,EAAAA,KAAA,QAAMuB,MAAOS,EAAQ1F,EAASC,EAASwD,SAClCiC,EAAQ,SAAW,aAEV,WAAdZ,EAAO3E,IACPoD,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gCAA+BC,SAAA,EAC3CC,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAAAlC,UACHC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CACDC,GAAE,eAAA6B,OAAiBR,EAAKnC,KACxBgC,MAAO,CAAEY,MAAO,WAAYpC,UAE5BC,EAAAA,EAAAA,KAACoC,EAAAA,EAAqB,SAI9BpC,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CAAAlC,UACHC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CACDC,GAAE,oBAAA6B,OAAsBR,EAAKnC,KAC7BgC,MAAO,CAAEc,YAAa,MAAOF,MAAO,WAAYpC,UAEhDC,EAAAA,EAAAA,KAACsC,EAAAA,EAAQ,SAIjBtC,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CACHM,QAAQ,OACRhB,MAAO,CAAEY,MAAO,WAChBK,QAAS,kBA3FhG,SACwBC,GAAA,OAAApD,EAAAtB,MAAC,KAADC,UAAA,CA0F8E0E,CAAWhB,EAAKnC,IAAI,EAACQ,UAEpCC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAU,SAGnBvB,EAAOwB,QAA2B,kBAAVZ,GACxBhC,EAAAA,EAAAA,KAAA6C,EAAAA,SAAA,CAAA9C,SAAGqB,EAAOwB,OAAOZ,KAEjBA,GAzCHZ,EAAO3E,GA6CxB,KAlD+CiF,EAAKnC,IAqDhE,WAMnBrC,IAAS8C,EAAAA,EAAAA,KAAC8C,EAAAA,EAAe,CACtBC,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,UAAU,MACVC,MAAO/F,EAAMgG,OACbvF,YAAaA,EACbJ,KAAMA,EACN4F,aAzIP,SAACC,EAAOC,GAC7B7F,EAAQ6F,EACZ,EAwIgCC,oBAtIA,SAACF,GAC7BxF,GAAgBwF,EAAMG,OAAOvB,OAC7BxE,EAAQ,EACZ,iBA4IJ,C","sources":["views/users/Users.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n    CCard,\n    CCardBody,\n    CCol,\n    CRow,\n} from '@coreui/react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { getAllUsers, deleteOneUser } from '../../Store/slices/userSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddBusinessRoundedIcon from '@mui/icons-material/AddBusinessRounded';\nimport VisibilityRoundedIcon from '@mui/icons-material/VisibilityRounded';\nimport EditIcon from '@mui/icons-material/Edit';\nimport {RiUserAddLine} from 'react-icons/ri'\nimport \"../../assets/css/style.css\"\nconst active = {\n    \"color\": \"white\",\n    \"backgroundColor\": \"#6be37e\",\n    \"padding\": \"8px 10px\",\n    \"borderRadius\": \"60px\",\n    \"fontWeight\": \"bolder\"\n}\nconst inactive = {\n    \"color\": \"white\",\n    \"backgroundColor\": \"#f06767\",\n    \"padding\": \"8px 10px\",\n    \"borderRadius\": \"60px\",\n    \"fontWeight\": \"bolder\"\n}\n\nconst columns = [\n    { id: 's_no', label: 'Sr', minWidth: 70 },\n    { id: 'name', label: 'Name', minWidth: 130 },\n    { id: 'email', label: 'Email', minWidth: 170 },\n    { id: 'phone', label: 'Phone', minWidth: 120 },\n    { id: 'status', label: 'Status', minWidth: 90 },\n    { id: 'action', label: 'Actions', minWidth: 180 },\n\n];\n\nconst Users = () => {\n\n    const dispatch = useDispatch();\n    const [users, setUsers] = useState([]);\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    async function fetchAllUsers() {\n        try {\n            const response = await dispatch(getAllUsers());\n            if(response && response.payload && response.payload.data && response.payload.data.result === \"Done\")\n            setUsers(response.payload.data.data);\n            else if(response && response.payload && response.payload.data && response.payload.data.result === \"Fail\")\n            alert(response.payload.data.message);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n    async function deleteUser(_id) {\n        if (window.confirm(\"Are Your Sure to Delete ?\")) {\n            var response = await dispatch(deleteOneUser(_id))\n            response = response.data\n            if (response)\n                if (response.result === \"Done\")\n                    fetchAllUsers()\n                else\n                    alert(response.message)\n        }\n    }\n\n    useEffect(() => {\n        fetchAllUsers();\n    }, [users])\n    return (\n        <div className=\"container\">\n            <CRow className='mb-3' >\n                <CCol xs={12} className='align-items-center'>\n                    <Link to=\"/users/add-user\" className='link-item'>\n                     Add  <RiUserAddLine />\n                    </Link>\n                </CCol>\n            </CRow>\n            <CRow>\n                <CCol xs={12}>\n                    <CCard className=\"mb-4\">\n                        <CCardBody>\n                            <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n                                <TableContainer sx={{ maxHeight: \"100%\" }}>\n                                    <Table stickyHeader aria-label=\"sticky table\">\n                                        <TableHead>\n                                            <TableRow>\n                                                {columns.map((column) => (\n                                                    <TableCell\n                                                        key={column.id}\n                                                        align={column.align}\n                                                        style={{ minWidth: column.minWidth }}\n                                                        className='fw-bold text-center'\n                                                    >\n                                                        {column.label}\n                                                    </TableCell>\n                                                ))}\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {users &&\n                                                users\n                                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                                    .map((user, index) => {\n                                                        const s_no = index + 1;\n                                                        return (\n                                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={user._id}>\n                                                                {columns.map((column) => {\n                                                                    const value = user[column.id];\n                                                                    return (\n                                                                        <TableCell\n                                                                            key={column.id}\n                                                                            align={column.align}\n                                                                            className='text-center'\n                                                                        >\n                                                                            {column.id === 's_no'\n                                                                                ? s_no\n                                                                                : column.id === 'status' ? (\n                                                                                    <span style={value ? active : inactive}>\n                                                                                        {value ? 'Active' : 'Inactive'}\n                                                                                    </span>\n                                                                                ) : column.id === 'action' ? (\n                                                                                    <span className='d-flex justify-content-center'>\n                                                                                        <Button>\n                                                                                            <Link\n                                                                                                to={`/users/user/${user._id}`}\n                                                                                                style={{ color: \"#5e86f2\" }}\n                                                                                            >\n                                                                                                <VisibilityRoundedIcon />\n                                                                                            </Link>\n\n                                                                                        </Button>\n                                                                                        <Button>\n                                                                                            <Link\n                                                                                                to={`/users/edit-user/${user._id}`}\n                                                                                                style={{ marginRight: \"5px\", color: \"#6be37e\" }}\n                                                                                            >\n                                                                                                <EditIcon />\n                                                                                            </Link>\n\n                                                                                        </Button>\n                                                                                        <Button\n                                                                                            variant='text'\n                                                                                            style={{ color: \"#f06767\" }}\n                                                                                            onClick={() => deleteUser(user._id)}\n                                                                                        >\n                                                                                            <DeleteIcon />\n                                                                                        </Button>\n                                                                                    </span>\n                                                                                ) : column.format && typeof value === 'number' ? (\n                                                                                    <>{column.format(value)}</>\n                                                                                ) : (\n                                                                                    value\n                                                                                )}\n                                                                        </TableCell>\n                                                                    );\n                                                                })}\n                                                            </TableRow>\n                                                        );\n                                                    })}\n                                        </TableBody>\n\n\n                                    </Table>\n                                </TableContainer>\n                                {users && <TablePagination\n                                    rowsPerPageOptions={[10, 25, 100]}\n                                    component=\"div\"\n                                    count={users.length}\n                                    rowsPerPage={rowsPerPage}\n                                    page={page}\n                                    onPageChange={handleChangePage}\n                                    onRowsPerPageChange={handleChangeRowsPerPage}\n                                />}\n                            </Paper>\n                        </CCardBody>\n                    </CCard>\n                </CCol>\n            </CRow>\n        </div>\n    )\n}\n\nexport default Users\n"],"names":["active","inactive","columns","id","label","minWidth","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","users","setUsers","_React$useState","React","_React$useState2","page","setPage","_React$useState3","_React$useState4","rowsPerPage","setRowsPerPage","fetchAllUsers","_fetchAllUsers","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","getAllUsers","sent","payload","data","result","alert","message","t0","console","error","stop","_deleteUser","_callee2","_id","_context2","window","confirm","deleteOneUser","useEffect","_jsxs","className","children","_jsx","CRow","CCol","xs","Link","to","RiUserAddLine","CCard","CCardBody","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","align","style","TableBody","slice","user","index","s_no","hover","role","tabIndex","value","Button","concat","color","VisibilityRoundedIcon","marginRight","EditIcon","variant","onClick","_x","deleteUser","DeleteIcon","format","_Fragment","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target"],"sourceRoot":""}