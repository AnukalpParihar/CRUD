{"version":3,"file":"static/js/697.2597fb5e.chunk.js","mappings":"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","sources":["views/note/Notes.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { CCard, CCardBody, CCol, CRow } from \"@coreui/react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Button from \"@mui/material/Button\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport LoyaltyIcon from \"@mui/icons-material/Loyalty\";\n\nimport \"../../assets/css/style.css\";\nimport { getAllNotes, deleteOneNote } from \"../../Store/slices/noteSlice\";\n\nconst active = {\n  color: \"white\",\n  backgroundColor: \"#6be37e\",\n  padding: \"8px 10px\",\n  borderRadius: \"60px\",\n  fontWeight: \"bolder\",\n};\nconst inactive = {\n  color: \"white\",\n  backgroundColor: \"#f06767\",\n  padding: \"8px 10px\",\n  borderRadius: \"60px\",\n  fontWeight: \"bolder\",\n};\n\nconst columns = [\n  { id: \"s_no\", label: \"Sr\", minWidth: 70 },\n  { id: \"title\", label: \"Name\", minWidth: 130 },\n  { id: \"description\", label: \"Descritption\", minWidth: 90 },\n  { id: \"action\", label: \"Actions\", minWidth: 180 },\n];\n\nexport default function Brands() {\n  const dispatch = useDispatch();\n  const [notes, setNotes] = useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  async function fetchAllNotes() {\n    try {\n      const response = await dispatch(getAllNotes());\n      if (\n        response &&\n        response.payload &&\n        response.payload.data &&\n        response.payload.result === \"Done\"\n      )\n        setNotes(response.payload.data);\n      else if (\n        response &&\n        response.payload &&\n        response.payload.data &&\n        response.payload.result === \"Fail\"\n      )\n        alert(response.payload.message);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  }\n  async function deleteNote(_id) {\n    if (window.confirm(\"Are Your Sure to Delete ?\")) {\n      var response = await dispatch(deleteOneNote(_id));\n      console.log(response);\n      if (response.payload.result === \"Done\") \n        fetchAllNotes();\n      else \n        alert(response.payload.message);\n    }\n  }\n  useEffect(() => {\n    fetchAllNotes();\n  }, [notes]);\n  return (\n    <div className=\"container\">\n      <CRow className=\"mb-3\">\n        <CCol xs={12} className=\"align-items-center\">\n          <Link to=\"/notes/add-note\" className=\"link-item\">\n            Add <LoyaltyIcon />\n          </Link>\n        </CCol>\n      </CRow>\n      <CRow>\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardBody>\n              <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n                <TableContainer sx={{ maxHeight: \"100%\" }}>\n                  <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                      <TableRow>\n                        {columns.map((column) => (\n                          <TableCell\n                            key={column.id}\n                            align={column.align}\n                            style={{ minWidth: column.minWidth }}\n                            className=\"fw-bold text-center\"\n                          >\n                            {column.label}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {notes &&\n                        notes\n                          .slice(\n                            page * rowsPerPage,\n                            page * rowsPerPage + rowsPerPage\n                          )\n                          .map((note, index) => {\n                            let s_no = index + 1;\n\n                            return (\n                              <TableRow\n                                hover\n                                role=\"checkbox\"\n                                tabIndex={-1}\n                                key={note._id}\n                              >\n                                {columns.map((column) => {\n                                  const value = note[column.id];\n                                  return (\n                                    <TableCell\n                                      key={column.id}\n                                      align={column.align}\n                                      className=\"text-center\"\n                                    >\n                                      {column.id === \"s_no\" ? (\n                                        s_no\n                                      ) : column.id === \"status\" ? (\n                                        <span style={value ? active : inactive}>\n                                          {value ? \"Active\" : \"Inactive\"}\n                                        </span>\n                                      ) : column.id === \"action\" ? (\n                                        <span className=\"d-flex justify-content-center\">\n                                          <Button>\n                                            <Link\n                                              to={`/notes/edit-note/${note._id}`}\n                                              style={{\n                                                marginRight: \"5px\",\n                                                color: \"#6be37e\",\n                                              }}\n                                            >\n                                              <EditIcon />\n                                            </Link>\n                                          </Button>\n                                          <Button\n                                            variant=\"text\"\n                                            style={{ color: \"#f06767\" }}\n                                            onClick={() => deleteNote(note._id)}\n                                          >\n                                            <DeleteIcon />\n                                          </Button>\n                                        </span>\n                                      ) : column.format &&\n                                        typeof value === \"number\" ? (\n                                        <>{column.format(value)}</>\n                                      ) : (\n                                        value\n                                      )}\n                                    </TableCell>\n                                  );\n                                })}\n                              </TableRow>\n                            );\n                          })}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n                {notes && (\n                  <TablePagination\n                    rowsPerPageOptions={[10, 25, 100]}\n                    component=\"div\"\n                    count={notes.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                  />\n                )}\n              </Paper>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </div>\n  );\n}\n"],"names":["active","color","backgroundColor","padding","borderRadius","fontWeight","inactive","columns","id","label","minWidth","Brands","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","notes","setNotes","_React$useState","React","_React$useState2","page","setPage","_React$useState3","_React$useState4","rowsPerPage","setRowsPerPage","fetchAllNotes","_fetchAllNotes","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","getAllNotes","sent","payload","data","result","alert","message","t0","console","error","stop","_deleteNote","_callee2","_id","_context2","window","confirm","deleteOneNote","log","useEffect","_jsxs","className","children","_jsx","CRow","CCol","xs","Link","to","LoyaltyIcon","CCard","CCardBody","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","align","style","TableBody","slice","note","index","s_no","hover","role","tabIndex","value","Button","concat","marginRight","EditIcon","variant","onClick","_x","deleteNote","DeleteIcon","format","_Fragment","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target"],"sourceRoot":""}